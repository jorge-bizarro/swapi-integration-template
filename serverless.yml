service: swapi-integration
frameworkVersion: '3'

package:
  individually: true

plugins:
  - serverless-auto-swagger
  - serverless-esbuild
  - serverless-dynamodb
  - serverless-offline

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  runtime: nodejs18.x
  tracing:
    apiGateway: true
    lambda: true
  vpc:
    securityGroupIds:
      - sg-023d52c24112c89c7
    subnetIds:
      - subnet-00f7f9d374dc2c6af
      - subnet-07caa174164b2c6a8
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            Fn::GetAtt:
              - PersonsTable
              - Arn
  environment:
    NODE_OPTIONS: '--enable-source-maps'
    STAGE: ${self:provider.stage}
    PERSONS_TABLE_NAME: ${self:custom.personsTableName}
    SWAPI_PERSON_ID_GSI_NAME: ${self:custom.swapiPersonIdGsiName}
    SWAPI_ENDPOINT_URL: ${env:SWAPI_ENDPOINT_URL, 'https://swapi.dev/api'}

custom:
  personsTableName: persons-table-${self:provider.stage}
  swapiPersonIdGsiName: swapiPersonId-GSI-${self:provider.stage}
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    keepNames: true
    watch:
      pattern: src/**/*.ts
  autoswagger:
    title: ${self:service}
    useStage: true
    basePath: /${self:provider.stage}

functions:
  healthCheck:
    handler: src/handlers/healthCheck.healthCheckHandler
    description: Function to return version of stack
    memorySize: 128
    timeout: 5
    package:
      patterns:
        - "package.json"
    events:
      - http:
          path: /healthCheck
          method: get
          cors: true
          swaggerTags:
            - Health
          responseData:
            200:
              description: Success retrieving package version
              bodyType: IBaseSuccessResponse
            500:
              description: Error occurred while retrieving package version
              bodyType: IBaseFailureResponse
  getAllPersons:
    handler: src/handlers/getAllPersons.getAllPersonsHandler
    timeout: 30
    events:
      - http:
          path: /person
          method: get
          cors: true
          swaggerTags:
            - Person
          responseData:
            200:
              description: Success retrieving data for all persons
              bodyType: ISuccessGetAllPersonsResponse
            500:
              description: Error occurred while retrieving data
              bodyType: IBaseFailureResponse
  savePerson:
    handler: src/handlers/savePerson.savePersonHandler
    events:
      - http:
          path: /person
          method: post
          cors: true
          swaggerTags:
            - Person
          responseData:
            201:
              description: Success information saved
              bodyType: ISuccessSavePersonResponse
            500:
              description: Error occurred while saving information
              bodyType: IBaseFailureResponse
  getPersonByIdFromSwapi:
    handler: src/handlers/getPersonBy.getPersonByIdFromSwapiHandler
    events:
      - http:
          path: /swapi/person/{id}
          method: get
          cors: true
          swaggerTags:
            - Person StarWars
          responseData:
            200:
              description: Success retrieving person information
              bodyType: ISuccessGetSwapiPersonResponse
            500:
              description: Error occurred while retrieving person information
              bodyType: IBaseFailureResponse

resources:
  Resources:
    PersonsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.personsTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
          - AttributeName: swapiPersonId
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.swapiPersonIdGsiName}
            KeySchema:
              - AttributeName: swapiPersonId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
